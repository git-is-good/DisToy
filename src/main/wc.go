package main

import (
	"fmt"
	"mapreduce"
	"os"
    "unicode"
    // 这个包用来做字符串和数字之间的转化
    "strconv"
)

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
func mapF(filename string, contents string) []mapreduce.KeyValue {
    mp := make(map[string]int)
    for wk := 0; wk < len(contents); wk += 1{
        if !unicode.IsLetter(int32(contents[wk])){
            continue
        }
        word := ""
        for unicode.IsLetter(int32(contents[wk])){
            word += string(contents[wk])
            wk += 1
        }
        mp[word] += 1
    }
    var rst []mapreduce.KeyValue
    for key, value := range(mp){
        rst = append(rst, mapreduce.KeyValue{key, strconv.Itoa(value)})
    }
    return rst
	// TODO: you have to write this function
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
func reduceF(key string, values []string) string {
    rst := 0
    for _, v := range(values){
        vi, _ := strconv.Atoi(v)
        rst += vi
    }
    return strconv.Itoa(rst)
    // TODO: you also have to write this function
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
