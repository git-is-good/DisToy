package mapreduce

import (
	"hash/fnv"
    "os"
    "io/ioutil"
    "encoding/json"
)

// doMap manages one map task: it reads one of the input files
// (inFile), calls the user-defined map function (mapF) for that file's
// contents, and partitions the output into nReduce intermediate files.
func doMap(
	jobName string, // the name of the MapReduce job
	mapTaskNumber int, // which map task this is
	inFile string,
	nReduce int, // the number of reduce task that will be run ("R" in the paper)
	mapF func(file string, contents string) []KeyValue,
) {
    contents, _ := ioutil.ReadFile(inFile)
    keyvalues := mapF(inFile, string(contents))
    files := make([]*os.File, nReduce)
    encs := make([]*json.Encoder, nReduce)
    for r := 0; r < nReduce; r += 1{
        nm := reduceName(jobName, mapTaskNumber, r)
        files[r], _ = os.Create(nm)
        encs[r] = json.NewEncoder(files[r])
    }
    for _, kv := range(keyvalues) {
        encs[ihash(kv.Key) % nReduce].Encode(kv)
    }
    // 注意：这一步关闭文件非常重要，有文件打开后未关闭导致的问题会在
    //      很久之后才显现出来
    // 如果出现了socket: too many files 这样的问题，可以先计算自己的程序
    // 在同一个时刻最多大概会打开多少文件，如果明显少于操作系统的限制
    // 那一定要想到可能是某处的文件打开后没有关闭。
    // ---- 要反复仔细的确认是不是真的关闭了，比如这里，原来也有下面
    //      这两行代码，但那时候并没有真的关闭，因为files[r]里面当时
    //      忘记把打开的文件指针放进去了
    for r := 0; r < nReduce; r += 1{
        files[r].Close()
    }

    //
	// You will need to write this function.
	//
	// The intermediate output of a map task is stored as multiple
	// files, one per destination reduce task. The file name includes
	// both the map task number and the reduce task number. Use the
	// filename generated by reduceName(jobName, mapTaskNumber, r) as
	// the intermediate file for reduce task r. Call ihash() (see below)
	// on each key, mod nReduce, to pick r for a key/value pair.
	//
	// mapF() is the map function provided by the application. The first
	// argument should be the input file name, though the map function
	// typically ignores it. The second argument should be the entire
	// input file contents. mapF() returns a slice containing the
	// key/value pairs for reduce; see common.go for the definition of
	// KeyValue.
	//
	// Look at Go's ioutil and os packages for functions to read
	// and write files.
	//
	// Coming up with a scheme for how to format the key/value pairs on
	// disk can be tricky, especially when taking into account that both
	// keys and values could contain newlines, quotes, and any other
	// character you can think of.
	//
	// One format often used for serializing data to a byte stream that the
	// other end can correctly reconstruct is JSON. You are not required to
	// use JSON, but as the output of the reduce tasks *must* be JSON,
	// familiarizing yourself with it here may prove useful. You can write
	// out a data structure as a JSON string to a file using the commented
	// code below. The corresponding decoding functions can be found in
	// common_reduce.go.
	//
	//   enc := json.NewEncoder(file)
	//   for _, kv := ... {
	//     err := enc.Encode(&kv)
	//
	// Remember to close the file after you have written all the values!
	//
}

func ihash(s string) int {
	h := fnv.New32a()
	h.Write([]byte(s))
	return int(h.Sum32() & 0x7fffffff)
}
